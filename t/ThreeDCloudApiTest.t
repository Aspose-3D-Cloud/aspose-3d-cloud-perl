=begin comment

Aspose.3D Cloud API Reference

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by Swagger Codegen
# Please update the test cases below to test the API endpoints.
# Ref: https://github.com/swagger-api/swagger-codegen
#
use Test::More tests => 50; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;
use File::Slurp; ##
use Data::Dumper;##
use strict;

use AsposeThreeDCloud::Object::PlySaveOption;
use AsposeThreeDCloud::Object::SaveOptions;
use AsposeThreeDCloud::Object::SaveFormat;
use AsposeThreeDCloud::Object::AMFSaveOption;
use AsposeThreeDCloud::Object::ModelData;
use AsposeThreeDCloud::Object::PdfSaveOption;
use_ok('AsposeThreeDCloud::ThreeDCloudApi');
require 'TestBase.pl';
my $new_client = get_client();
my $api = AsposeThreeDCloud::ThreeDCloudApi->new($new_client);
isa_ok($api, 'AsposeThreeDCloud::ThreeDCloudApi');

#
# copy_file test
#
{
    my $src_path = '3DTest\Aspose.pdf'; # replace NULL with a proper value
    my $dest_path = '3DTest\Aspose.Perl.pdf';  # ''replace NULL with a proper value
    my $src_storage_name = undef; # replace NULL with a proper value
    my $dest_storage_name = undef; # replace NULL with a proper value
    my $version_id = undef; # replace NULL with a proper value
    eval {
      my $result = $api->copy_file(src_path => $src_path, dest_path => $dest_path, src_storage_name => $src_storage_name, dest_storage_name => $dest_storage_name, version_id => $version_id);
    };
    if ($@) 
    {
        printf "copy_file test -> Failed!\n";

    } else {
        printf "copy_file test -> Ok!\n";
    }
}


=pod
#
# copy_folder test
#
{
    my $src_path = '3DTest'; # replace NULL with a proper value
    my $dest_path = '3DTestPerl'; # replace NULL with a proper value
    my $src_storage_name = undef; # replace NULL with a proper value
    my $dest_storage_name = undef; # replace NULL with a proper value
    eval {
        my $result = $api->copy_folder(src_path => $src_path, dest_path => $dest_path, src_storage_name => $src_storage_name, dest_storage_name => $dest_storage_name);
    };
    if ($@) 
    {
        printf "copy_folder test -> Failed!\n";

    } else {
        printf "copy_folder test -> Ok!\n";
    }
}
#
# upload_file test
#
{
    my $path = '3DTest\Aspose.Upload.pdf';  
    
    my $file = 'E:\Cloud\src\perl\testData\Aspose.pdf'; # replace NULL with a proper value
    my $upload_file_data = read_file($file , binmode => ':raw' );
    my $storage_name = undef;#'First Storage'; # replace NULL with a proper value
    eval {
         my $result = $api->upload_file(path => $path, file => $file, storage_name => $storage_name);
    };
    if ($@) {
        fail("upload_file raised an exception: $@");
    }
    else {
        printf "upload_file test -> Ok!\n";
    }
    pass();
 
}
#
# download_file test
#
{
    #my $path = '3DTestPerl\Aspose.pdf'; # replace NULL with a proper value
    my $path = '3DTest\Aspose.pdf';
    my $storage_name = undef; # replace NULL with a proper value
    my $version_id = undef; # replace NULL with a proper value
    eval { 
        my $result = my $result = $api->download_file(path => $path, storage_name => $storage_name, version_id => $version_id);
        printf Dumper($result);
        my $out_filename = 'E:\Cloud\src\perl\testData\0519.pdf';
        open (OUT, ">$out_filename") ;
        binmode (OUT) ;# /r/n issue must be binary wroten
        print OUT $result ;
        close (OUT) ;
        #write_file($out_filename,$result);
    };
    if ($@) {
        warn "Exception when calling CellsApi->download_file: $@\n";
    }
    # whether the file is exists
    #if (-e $out_filename) {
    #    die ("Output file outfile already exists.\n");
    #}
    pass();
}

#
# post_convert_by_format test
#
{
    my $name = 'Aspose.Upload.pdf'; # replace NULL with a proper value
    my $newformat = 'pdf'; # replace NULL with a proper value
    my $newfilename = 'saveasformat.pdf';; # replace NULL with a proper value
    my $folder = '3DTest'; # replace NULL with a proper value
    my $is_overwrite = 'true'; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    eval {
        my $result = $api->post_convert_by_format(name => $name, newformat => $newformat, newfilename => $newfilename, folder => $folder, is_overwrite => $is_overwrite, storage => $storage);
    };
    if ($@) {
        warn "Exception when calling CellsApi->post_convert_by_format: $@\n";
    }
    pass();
}
 
#
# post_convert_by_opt test
#
{
    #use enum qw(HOME WORK MOBILE);
    my $name = 'Aspose.pdf'; # replace NULL with a proper value
    my $saveoptions =  AsposeThreeDCloud::Object::PdfSaveOption->new(); # replace NULL with a proper value
    my $saveformat =  AsposeThreeDCloud::Object::SaveFormat->new();
    $saveoptions->{save_format} = $saveformat->{PDF};
    my $newfilename = 'saveas_perl_Opts.pdf'; # replace NULL with a proper value
    my $folder = '3DTest'; # replace NULL with a proper value
    my $is_overwrite = 'true'; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_convert_by_opt(name => $name, save_options => $saveoptions, newfilename => $newfilename, folder => $folder, is_overwrite => $is_overwrite, storage => $storage);
}

#
# post_model test
#
{
    my $name =  '3DTest\Aspose.pdf'; 
    my $modeldata = AsposeThreeDCloud::Object::ModelData->new(); 
    my $newformat = 'pdf';
    my $folder = undef;
    my $storage = undef; 
    my $transform = AsposeThreeDCloud::Object::Transform->new(); 
    $modeldata->{transform}=$transform;
    my $translation = AsposeThreeDCloud::Object::Vector3->new(); 
    $modeldata->{transform}->{translation}=$translation;
    $modeldata->{transform}->{translation}->{X}=500;
    $modeldata->{transform}->{translation}->{Y}=500; 
    $modeldata->{transform}->{translation}->{Z}=500;

    my $entity = AsposeThreeDCloud::Object::Entity->new(); 
    $modeldata->{entity}=$entity;
    my $torus = AsposeThreeDCloud::Object::Torus->new(); 
    $modeldata->{entity}->{torus}=$torus;
    #$modeldata->{entity}->{torus}->{arc}=0;  
    $modeldata->{entity}->{torus}->{radius}=10;
    $modeldata->{entity}->{torus}->{tube}=20;
    $modeldata->{entity}->{torus}->{radial_segments}=10;
    $modeldata->{entity}->{torus}->{tubular_segments}=10;

    my $result = $api->post_model(name => $name, modeldata => $modeldata, newformat => $newformat, folder => $folder, storage => $storage);
}
  
#
# create_folder test
#
{
    my $path = '3DTestPerlNe '; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    eval {
        my $result = $api->create_folder(path => $path, storage_name => $storage_name);
    };
    if ($@) 
    {
        printf "create_folder test -> Failed!\n";

    } else {
        printf "create_folder test -> Ok!\n";
    }
}
#
# delete_file test
#
{
    my $path = undef; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    my $version_id = undef; # replace NULL with a proper value
    my $result = $api->delete_file(path => $path, storage_name => $storage_name, version_id => $version_id);
}

#
# delete_folder test
#
{
    my $path = undef; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    my $recursive = undef; # replace NULL with a proper value
    my $result = $api->delete_folder(path => $path, storage_name => $storage_name, recursive => $recursive);
}

#
# delete_nodes test
#
{
    my $name = undef; # replace NULL with a proper value
    my $objectaddressingpath = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->delete_nodes(name => $name, objectaddressingpath => $objectaddressingpath, folder => $folder, storage => $storage);
}

#
# get_disc_usage test
#
{
    my $storage_name = undef; # replace NULL with a proper value
    my $result = $api->get_disc_usage(storage_name => $storage_name);
}

#
# get_file_versions test
#
{
    my $path = undef; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    my $result = $api->get_file_versions(path => $path, storage_name => $storage_name);
}

#
# get_files_list test
#
{
    my $path = undef; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    my $result = $api->get_files_list(path => $path, storage_name => $storage_name);
}

#
# move_file test
#
{
    my $src_path = undef; # replace NULL with a proper value
    my $dest_path = undef; # replace NULL with a proper value
    my $src_storage_name = undef; # replace NULL with a proper value
    my $dest_storage_name = undef; # replace NULL with a proper value
    my $version_id = undef; # replace NULL with a proper value
    my $result = $api->move_file(src_path => $src_path, dest_path => $dest_path, src_storage_name => $src_storage_name, dest_storage_name => $dest_storage_name, version_id => $version_id);
}

#
# move_folder test
#
{
    my $src_path = undef; # replace NULL with a proper value
    my $dest_path = undef; # replace NULL with a proper value
    my $src_storage_name = undef; # replace NULL with a proper value
    my $dest_storage_name = undef; # replace NULL with a proper value
    my $result = $api->move_folder(src_path => $src_path, dest_path => $dest_path, src_storage_name => $src_storage_name, dest_storage_name => $dest_storage_name);
}

#
# o_auth_post test
#
{
    my $grant_type = undef; # replace NULL with a proper value
    my $client_id = undef; # replace NULL with a proper value
    my $client_secret = undef; # replace NULL with a proper value
    my $result = $api->o_auth_post(grant_type => $grant_type, client_id => $client_id, client_secret => $client_secret);
}

#
# object_exists test
#
{
    my $path = undef; # replace NULL with a proper value
    my $storage_name = undef; # replace NULL with a proper value
    my $version_id = undef; # replace NULL with a proper value
    my $result = $api->object_exists(path => $path, storage_name => $storage_name, version_id => $version_id);
}

#
# post_convert_by_opt test
#
{
    my $name = undef; # replace NULL with a proper value
    my $save_options = undef; # replace NULL with a proper value
    my $newfilename = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $is_overwrite = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_convert_by_opt(name => $name, save_options => $save_options, newfilename => $newfilename, folder => $folder, is_overwrite => $is_overwrite, storage => $storage);
}

#
# post_create test
#
{
    my $format = undef; # replace NULL with a proper value
    my $result = $api->post_create(format => $format);
}


#
# post_pdf_raw_data test
#
{
    my $name = undef; # replace NULL with a proper value
    my $multifileprefix = undef; # replace NULL with a proper value
    my $password = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_pdf_raw_data(name => $name, multifileprefix => $multifileprefix, password => $password, folder => $folder, storage => $storage);
}

#
# post_save_as_part test
#
{
    my $name = undef; # replace NULL with a proper value
    my $objectaddressingpath = undef; # replace NULL with a proper value
    my $newformat = undef; # replace NULL with a proper value
    my $newfilename = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $is_overwrite = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_save_as_part(name => $name, objectaddressingpath => $objectaddressingpath, newformat => $newformat, newfilename => $newfilename, folder => $folder, is_overwrite => $is_overwrite, storage => $storage);
}

#
# post_scene_to_file test
#
{
    my $name = undef; # replace NULL with a proper value
    my $multifileprefix = undef; # replace NULL with a proper value
    my $newformat = undef; # replace NULL with a proper value
    my $password = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_scene_to_file(name => $name, multifileprefix => $multifileprefix, newformat => $newformat, password => $password, folder => $folder, storage => $storage);
}

#
# post_triangulate_new test
#
{
    my $name = undef; # replace NULL with a proper value
    my $newfilename = undef; # replace NULL with a proper value
    my $newformat = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_triangulate_new(name => $name, newfilename => $newfilename, newformat => $newformat, folder => $folder, storage => $storage);
}

#
# post_triangulate_original test
#
{
    my $name = undef; # replace NULL with a proper value
    my $folder = undef; # replace NULL with a proper value
    my $storage = undef; # replace NULL with a proper value
    my $result = $api->post_triangulate_original(name => $name, folder => $folder, storage => $storage);
}

#
# storage_exists test
#
{
    my $storage_name = undef; # replace NULL with a proper value
    my $result = $api->storage_exists(storage_name => $storage_name);
}
=cut
1;
